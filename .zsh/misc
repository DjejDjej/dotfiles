autoload -Uz compinit
compinit

fzf_tree_ignore() {
  local base_dir tree_cmd selected
  base_dir="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
  tree_cmd="tree -afi --noreport -I '.*|node_modules' \"$base_dir\""
  [[ "$PWD" != "$base_dir" ]] && tree_cmd="$tree_cmd | sed \"s|^$base_dir/||\""
  selected="$(eval "$tree_cmd" | fzf --preview '([[ -d {} ]] && tree -C {} || bat --style=numbers --color=always {})')"
  [[ -z "$selected" ]] && return
  selected="${selected#\"}"
  selected="${selected%\"}"
  if [[ "$selected" == /* ]]; then
    [[ -d "$selected" ]] && cd "$selected" || "${EDITOR:-vim}" "$selected"
  else
    [[ -d "$base_dir/$selected" ]] && cd "$base_dir/$selected" || "${EDITOR:-vim}" "$base_dir/$selected"
  fi
}

fzf_tree_all() {
  local base_dir tree_cmd selected
  base_dir="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
  tree_cmd="tree -afi --noreport \"$base_dir\""
  [[ "$PWD" != "$base_dir" ]] && tree_cmd="$tree_cmd | sed \"s|^$base_dir/||\""
  selected="$(eval "$tree_cmd" | fzf --preview '([[ -d {} ]] && tree -C {} || bat --style=numbers --color=always {})')"
  [[ -z "$selected" ]] && return
  selected="${selected#\"}"
  selected="${selected%\"}"
  if [[ "$selected" == /* ]]; then
    [[ -d "$selected" ]] && cd "$selected" || "${EDITOR:-vim}" "$selected"
  else
    [[ -d "$base_dir/$selected" ]] && cd "$base_dir/$selected" || "${EDITOR:-vim}" "$base_dir/$selected"
  fi
}

zle -N fzf_tree_ignore
zle -N fzf_tree_all
bindkey '^T' fzf_tree_ignore
bindkey '^F' fzf_tree_all




# Customize completion styles
zstyle ':completion:*' menu select
zstyle ':completion:*:default' list-colors 'di=34:fi=0:ln=35:pi=33:so=32:bd=37:cd=37:or=31:ex=32:*.tar=31:*.gz=31:*.zip=31:*.jpg=35:*.png=35:*.gif=35'
# Load colors from the current terminal settings
autoload -Uz colors && colors

## History wrapper
function omz_history {
  # parse arguments and remove from $@
  local clear list stamp REPLY
  zparseopts -E -D c=clear l=list f=stamp E=stamp i=stamp t:=stamp

  if [[ -n "$clear" ]]; then
    # if -c provided, clobber the history file

    # confirm action before deleting history
    print -nu2 "This action will irreversibly delete your command history. Are you sure? [y/N] "
    builtin read -E
    [[ "$REPLY" = [yY] ]] || return 0

    print -nu2 >| "$HISTFILE"
    fc -p "$HISTFILE"

    print -u2 History file deleted.
  elif [[ $# -eq 0 ]]; then
    # if no arguments provided, show full history starting from 1
    builtin fc $stamp -l 1
  else
    # otherwise, run `fc -l` with a custom format
    builtin fc $stamp -l "$@"
  fi
}

# Timestamp format
case ${HIST_STAMPS-} in
  "mm/dd/yyyy") alias history='omz_history -f' ;;
  "dd.mm.yyyy") alias history='omz_history -E' ;;
  "yyyy-mm-dd") alias history='omz_history -i' ;;
  "") alias history='omz_history' ;;
  *) alias history="omz_history -t '$HIST_STAMPS'" ;;
esac

## History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
[ "$HISTSIZE" -lt 50000 ] && HISTSIZE=50000
[ "$SAVEHIST" -lt 10000 ] && SAVEHIST=10000

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data
setopt HIST_IGNORE_SPACE
setopt HIST_IGNORE_DUPS



BLUE="%F{red}"  # Closest ANSI 256 color code for #0dcdcd
WHITE="%F{white}"
RESET="%f"
export normal_PROMPT='${WHITE}%n${RESET}@${BLUE}%m${RESET}:${WHITE}%~${RESET}$ '
PROMPT=$normal_PROMPT

setopt PROMPT_SUBST

alias p="PROMPT=\"$normal_PROMPT\""


autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:git*' formats "%b -> "
precmd() {vcs_info}
GIT_COMMANDS=("git" "ga" "gc" "gac" "gp" "g")
GIT_PROMPT='${vcs_info_msg_0_}${WHITE}%n${RESET}@${BLUE}%m${RESET}:${WHITE}%~${RESET}$ '

KUBE_PROMPT='$(kube_ps1) -> ${WHITE}%n${RESET}@${BLUE}%m${RESET}:${WHITE}%~${RESET}$ '
KUBE_COMMANDS=("kubectl" "kubens" "kubectx" "k" "k9s" "ns" "ctx" "oc")

    preexec() {
        #KUBE
        for cmd in "${KUBE_COMMANDS[@]}"; do
            [[ $1 == $cmd* ]] && PROMPT="$KUBE_PROMPT" && return
        done
        
        for cmd in "${GIT_COMMANDS[@]}"; do
            [[ $1 == $cmd* ]] && PROMPT="$GIT_PROMPT" && return
        done


    }




